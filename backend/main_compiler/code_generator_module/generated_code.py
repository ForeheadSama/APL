# Generated Python code
# Generated on: 2025-03-29 15:23:43
# This file was automatically generated by the compiler's code generator

import datetime
import sys
from dotenv import load_dotenv
import json
import os
import re
import requests

# Add the project root directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))

import backend.llm_integration.gemini_helper
import backend.database.query

# Helper functions for ticket system operations
def check_availability(event_id):
    available = backend.database.query.check_available_tickets(event_id)
    print(f"Available tickets for event {event_id}: {available}")
    return available

def check_price(event_id):
    price = backend.database.query.check_event_price(event_id)
    if price:
        print(f"Price for event {event_id}: ${price}")
    else:
        print(f"Price information for event {event_id} not available.")
    return price

def book_tickets(event_id, user_id, quantity):
    success, message = backend.database.query.book_ticket(event_id, user_id, quantity)
    print(message)
    return success

def pay_for_booking(booking_id):
    success, message = backend.database.query.pay_for_booking(booking_id)
    print(message)
    return success

def cancel_booking(booking_id):
    success, message = backend.database.query.cancel_booking(booking_id)
    print(message)
    return success

def list_events_on_date(event_type, date_str):
    # Call the Gemini helper to fetch and update events first
    backend.llm_integration.gemini_helper.sync_events_from_eventbrite(event_type)
    
    # Convert date string to proper format
    try:
        # Parse date in format 'Month Day, Year'
        date_obj = datetime.datetime.strptime(date_str, '%B %d, %Y').date()
        # Check if date is valid (not in past and not too far in future)
        today = datetime.datetime.now().date()

        if date_obj < today:
            print("Error: Cannot list events from the past. Please select a current or future date.")
            return None
        
        # Call the database query to get events on the specified date
        events = backend.database.query.get_events_by_date(event_type, date_obj)
        if events:
            formatted_events = backend.llm_integration.gemini_helper.format_events_list(events)
            print(formatted_events)
            return events
        else:
            print(f"No {event_type} events found on {date_str}.")
            return None
    except ValueError as e:
        print(f"Error: Invalid date format. Please use 'Month Day, Year' format (e.g., 'June 15, 2024').")
        return None

def list_event_details(event_name):
    # Call the Gemini helper to fetch and update events first
    backend.llm_integration.gemini_helper.sync_events_from_eventbrite(None)
    
    # Call the database query to get events with the specified name
    events = backend.database.query.get_events_by_name(event_name)
    if events:
        formatted_events = backend.llm_integration.gemini_helper.format_event_details(events)
        print(formatted_events)
        return events
    else:
        print(f"No events found with name '{event_name}'.")
        return None

# Main program starts here


print('Hello World')

# By Alex-Ann
# == End of generated code == 