# Generated Python code
# Generated on: 2025-03-22 15:29:41
# This file was automatically generated by the compiler's code generator

import datetime
import sys
from dotenv import load_dotenv
import json
import os
import re
import requests

# Add the project root directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))

import backend.llm_integration.gemini_helper
import backend.database.query

# Helper functions for ticket system operations
def check_availability(event_id):
    available = backend.database.query.check_available_tickets(event_id)
    print(f"Available tickets for event {event_id}: {available}")
    return available

def check_price(event_id):
    price = backend.database.query.check_event_price(event_id)
    if price:
        print(f"Price for event {event_id}: ${price}")
    else:
        print(f"Price information for event {event_id} not available.")
    return price

def book_tickets(event_id, user_id, quantity):
    success, message = backend.database.query.book_ticket(event_id, user_id, quantity)
    print(message)
    return success

def pay_for_booking(booking_id):
    success, message = backend.database.query.pay_for_booking(booking_id)
    print(message)
    return success

def cancel_booking(booking_id):
    success, message = backend.database.query.cancel_booking(booking_id)
    print(message)
    return success

# Main program starts here

name = "Anna"  # String declaration
numTick = 2  # Integer declaration
book_tickets(2, "Anna", "March 5, 2024", "Grand Gala")

# Check if API key is set
if not GEMINI_API_KEY:
    print("WARNING: GEMINI_API_KEY environment variable not set. Some functions will be limited.")
    print("Set it using: export GEMINI_API_KEY='your_api_key_here'")

# End of generated code