# Generated Python code
# Generated on: 2025-03-20 18:26:12
# This file was automatically generated by the compiler's code generator

import datetime
import sys
from dotenv import load_dotenv
import google.generativeai as genai
import json
import os
import re
import requests

# Google Gemini API configuration
# Make sure to set GEMINI_API_KEY as an environment variable
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent'

# Global variables to store tickets booking and event information
events = {}
bookings = {}

# Helper functions for ticket system operations
def fetch_events_from_gemini(event_type, date_str):
    """Use Google Gemini API to fetch information about events"""
    if not GEMINI_API_KEY:
        print("Error: GEMINI_API_KEY environment variable not set.")
        return []

    headers = {
        'Content-Type': 'application/json',
        'x-goog-api-key': GEMINI_API_KEY
    }

    # Format the prompt
    prompt = f"List real {event_type} events occurring on {date_str}. "
    prompt += "Format the response as a JSON array with each event having fields: "
    prompt += "name, venue, time, description. Include only 5 events and be factual. "
    prompt += "Make sure the response is valid JSON."

    data = {
        'contents': [{
            'parts': [{
                'text': prompt
            }]
        }]
    }

    try:
        response = requests.post(
            GEMINI_API_URL,
            headers=headers,
            json=data
        )

        if response.status_code == 200:
            result = response.json()
            text_content = result['candidates'][0]['content']['parts'][0]['text']
            
            # Extract JSON from the response
            try:
                # First try to find JSON within triple backticks
                json_match = re.search(r'```json\n(.+?)\n```', text_content, re.DOTALL)
                if json_match:
                    json_str = json_match.group(1)
                else:
                    # Otherwise take the whole text as JSON
                    json_str = text_content
                
                events_data = json.loads(json_str)
                return events_data
            except json.JSONDecodeError as e:
                print(f"Error parsing JSON response: {e}")
                print("Raw response:", text_content)
                return []
        else:
            print(f"API request failed with status code: {response.status_code}")
            print(f"Response: {response.text}")
            return []
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return []

def book_tickets(quantity, customer, date, event):
    # Convert types if needed
    try:
        quantity = int(quantity) if not isinstance(quantity, int) else quantity
    except ValueError:
        print(f"Error: Invalid quantity format. Using 1 as default.")
        quantity = 1
    
    # Create event if it doesn't exist
    if event not in events:
        events[event] = {
            'date': date,
            'capacity': 100,  # Default capacity
            'available_tickets': 100 - quantity,
            'bookings': []
        }
    else:
        # Update available tickets
        current_available = events[event].get('available_tickets', 100)
        if current_available < quantity:
            print(f"Warning: Only {current_available} tickets available for {event}")
            if current_available <= 0:
                print(f"Error: Event {event} is sold out!")
                return
            quantity = current_available
        events[event]['available_tickets'] = current_available - quantity
    
    booking_id = f"{customer}_{event}_{date}"
    bookings[booking_id] = {
        'quantity': quantity,
        'customer': customer,
        'date': date,
        'event': event,
        'paid': False
    }
    # Add booking reference to the event
    events[event]['bookings'].append(booking_id)
    print(f"Successfully Booked tickets for {customer} on {date} for {event}")

def list_event_details(event):
    if event in events:
        print(f"Details for {event}:")
        for key, value in events[event].items():
            if key != 'bookings':  # Skip printing the full bookings list
                print(f"  {key}: {value}")
        print(f"  Total bookings: {len(events[event].get('bookings', []))}")
    else:
        print(f"Event '{event}' not found.")
        
        # Try to search for it using Gemini
        try:
            gemini_events = fetch_events_from_gemini(event, "upcoming")
            
            if gemini_events:
                for i, evt in enumerate(gemini_events, 1):
                    if evt.get('name', '').lower() == event.lower() or event.lower() in evt.get('name', '').lower():
                        print(f"\nFound matching event:")
                        print(f"Name: {evt.get('name', 'Unnamed event')}")
                        print(f"Venue: {evt.get('venue', 'Not specified')}")
                        print(f"Time: {evt.get('time', 'Not specified')}")
                        print(f"Description: {evt.get('description', 'No description available')}")
                        return
                print(f"No exact matches found for '{event}'")
            else:
                print("No information found or API request failed.")
        except Exception as e:
            print(f"Error fetching event information from Gemini: {str(e)}")

# Main program starts here

book_tickets(2, "John Doe", "April 22, 2024", "Taylor Swift Concert")
events_data = fetch_events_from_gemini("flights", "April 21, 2024")
if events_data:
    for event in events_data:
        print(f"Event: {event.get('name', 'Unnamed event')}")
        print(f"Venue: {event.get('venue', 'Not specified')}")
        print(f"Time: {event.get('time', 'Not specified')}")
        print(f"Description: {event.get('description', 'No description available')}")
else:
    print("No events found for the given date.")

# Check if API key is set
if not GEMINI_API_KEY:
    print("WARNING: GEMINI_API_KEY environment variable not set. Some functions will be limited.")
    print("Set it using: export GEMINI_API_KEY='your_api_key_here'")

# End of generated code