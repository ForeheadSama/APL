pick 00d6c831e4f73f5617ab02481c74f5bb1d51fc4d Fix codebase
pick 90898c8a9d108f65b40e792959676e2d8f85de8a Fixes: 1. fixed parser error messages 2. fixed return type check 3. bool must now been written in lower case (true/false instead of True/False) 4. got rid of duplicate operations & functions 5. some project clean-up, all errors are now reported in one file (utils/output_handler.py)
pick 2f24d48acce578c95ee89c3cd6a258e4bb7081db Remove HEAD

# Rebase 377f7cd..2f24d48 onto 377f7cd (3 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
